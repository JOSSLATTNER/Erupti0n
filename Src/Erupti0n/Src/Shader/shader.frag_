#version 450
#extension GL_ARB_separate_shader_objects : enable

#define R vec2(780.0,557.0);
#define V4 vec4
#define V3 vec3
#define V2 vec2
#define t pc.time

layout(location = 0) out vec4 outColor;
layout(location = 0) in vec2 uv;

layout(push_constant) uniform pushConstant
{
	float time;
}pc;

//void main() 
//{
//	vec2 nuv = 2.* uv - 1.;
//	outColor = vec4( nuv, 0.0, 1.0 );
//}


vec3 n1 = vec3(1.000,0.000,0.000);
vec3 n2 = vec3(0.000,1.000,0.000);
vec3 n3 = vec3(0.000,0.000,1.000);
vec3 n4 = vec3(0.577,0.577,0.577);
vec3 n5 = vec3(-0.577,0.577,0.577);
vec3 n6 = vec3(0.577,-0.577,0.577);
vec3 n7 = vec3(0.577,0.577,-0.577);
vec3 n8 = vec3(0.000,0.357,0.934);
vec3 n9 = vec3(0.000,-0.357,0.934);
vec3 n10 = vec3(0.934,0.000,0.357);
vec3 n11 = vec3(-0.934,0.000,0.357);
vec3 n12 = vec3(0.357,0.934,0.000);
vec3 n13 = vec3(-0.357,0.934,0.000);
vec3 n14 = vec3(0.000,0.851,0.526);
vec3 n15 = vec3(0.000,-0.851,0.526);
vec3 n16 = vec3(0.526,0.000,0.851);
vec3 n17 = vec3(-0.526,0.000,0.851);
vec3 n18 = vec3(0.851,0.526,0.000);
vec3 n19 = vec3(-0.851,0.526,0.000);



struct Camera
{
    V3 p;
    V3 d;
};

float octahedral(vec3 p, float e, float r) {
    float s = pow(abs(dot(p,n4)),e);
    s += pow(abs(dot(p,n5)),e);
    s += pow(abs(dot(p,n6)),e);
    s += pow(abs(dot(p,n7)),e);
    s = pow(s, 1./e);
    return s-r;
}

float udBox( V3 p, V3 pb, V3 b )
{
  return length(max(abs(pb - p)-b,0.0));
}

float sdPlane(V3 p, V4 n)
{
    

    return dot(p,n.xyz)+n.w;
}

float sdSphere(V3 p, V4 s)
{
    return length(s.xyz - p);
}

float map(V3 p)
{
    float s = sdSphere(p, V4(cos(t*0.25)*2.,0.,sin(t*0.31)*2.+3.,1.));
    //float pl =  sdPlane(p, normalize(V4(0.,1.,0.,0.001)));
    float b = udBox(p,V3(0.,-2.,0.),V3(50.,0.1,50.0));
    return min(1.,s);
}

vec3 normal(in vec3 p, in vec3 rd)
{
    vec2 e = vec2(-1., 1.)*2e-5;
	return normalize(e.yxx*map(p + e.yxx) + e.xxy*map(p + e.xxy) + 
					 e.xyx*map(p + e.xyx) + e.yyy*map(p + e.yyy));   
}

Camera GetCamera(V3 pos, V2 latlong, V2 U)
{
    Camera c;

	//V3 tg = pos+V3(1.,0.,0.);
	//V2 forwlatlong = V2(sqrt(tg.x*tg.x+tg.y*tg.y),atan(tg.y,tg.x)); 
	//latlong = forwlatlong;

    V3 forward 	= V3(sin(latlong.y)*cos(latlong.x),cos(latlong.y),sin(latlong.y)*sin(latlong.x));
    latlong += V2(0.,-1.57);
    V3 up 		= V3(sin(latlong.y)*cos(latlong.x),cos(latlong.y),sin(latlong.y)*sin(latlong.x));
    V3 right 	= cross(up,forward);
   	
	
    c.p = pos;
    c.d = normalize(right*-U.x+up*-U.y+forward*1.);
    
    return c;
}

void main()
{
	V2 U =( uv *2.0) -1.0;
    U.y *= -1.;
    U.x *= 1920./1080.;
	outColor = V4(0.);

	V2 camOrbit = V2(0.025*t*6.28,1.57);

    V3 co	=V3(0.,0.,-2); 
    //co = V3(sin(camOrbit.y)*cos(camOrbit.x),cos(camOrbit.y),sin(camOrbit.y)*sin(camOrbit.x))*3.;

    Camera c = GetCamera(co,V2(1.57,1.57),U);
    
    float d;
	V3 p;
    float maxSteps = 128.;

    for(float i =0.; i< 1.; i += 1.0/maxSteps)
    {
    	p += 0.25 * d * c.d ;    
        d = map(p);

        if(d <= 0.0001)
        {
            outColor.xyz = normal(p,c.d);
            break;
        }
        else
			outColor.xyz = vec3(1.);  
    }
    //outColor.xyz = vec3(U,0.);
}